# GitHub Actions Workflow — Windows-only **Release** build for Aseprite (GUI + Lua)
# Save as .github/workflows/build.yml

name: build

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build:
    runs-on: windows-latest

    steps:
      #######################################################################
      # 1️⃣  Checkout (with submodules)
      #######################################################################
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      #######################################################################
      # 2️⃣  Toolchain helpers – Ninja + MSVC env
      #######################################################################
      - uses: aseprite/get-ninja@main
      - uses: ilammy/msvc-dev-cmd@v1

      #######################################################################
      # 3️⃣  Download Skia that matches the current commit
      #######################################################################
      - name: Download Skia
        shell: bash
        run: |
          this_dir=$(cygpath "${{ github.workspace }}")
          skia_url=$(source "$this_dir/laf/misc/skia-url.sh" | xargs)
          skia_file=$(basename "$skia_url")
          echo "Skia URL → $skia_url"
          curl -L -o "$skia_file" "$skia_url"
          unzip -q "$skia_file" -d skia

      #######################################################################
      # 4️⃣  Install **OpenSSL 1.1**  ── Chocolatey (auto-detect version)
      #     ➜ fallback to silent Win64OpenSSL_Light-1.1.1w.exe installer
      #######################################################################
      - name: Install OpenSSL 1.1 runtime
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'

          ##############################################################
          # (A) Try the newest 1.1.1-xxxx available in Chocolatey
          ##############################################################
          $vers = choco list openssl.light --exact --all-versions |
                  Select-String -Pattern '1\.1\.1\.[0-9]+' |
                  ForEach-Object { $_.Matches.Value } | Sort-Object -Descending

          $installed = $false
          foreach ($v in $vers) {
            Write-Host "➜  Trying Chocolatey openssl.light $v …"
            choco install openssl.light --version $v --params "\"/InstallDir:C:\openssl\"" -y --no-progress
            if ($LASTEXITCODE -eq 0) { $installed = $true; break }
          }

          ##############################################################
          # (B) Fallback: download & silent-install Inno Setup package
          ##############################################################
          if (-not (Test-Path 'C:\openssl\bin\libcrypto-1_1-x64.dll')) {
            Write-Host '⚠️  Chocolatey failed – using Win64OpenSSL_Light-1.1.1w.exe …'
            iwr -Uri 'https://slproweb.com/download/Win64OpenSSL_Light-1_1_1w.exe' -OutFile openssl.exe
            Start-Process -FilePath .\openssl.exe -ArgumentList '/verysilent','/sp-','/suppressmsgboxes','/norestart','/dir="C:\openssl"' -NoNewWindow -Wait
          }

      #######################################################################
      # 5️⃣  Configure CMake (Release + Skia + Lua scripting)
      #######################################################################
      - name: Configure CMake
        shell: bash
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DLAF_BACKEND=skia \
            -DSKIA_DIR=$(realpath skia) \
            -DSKIA_LIBRARY_DIR=$(realpath skia/out/Release-x64) \
            -DENABLE_SCRIPTING=ON \
            -DENABLE_CCACHE=OFF

      #######################################################################
      # 6️⃣  Build
      #######################################################################
      - name: Build
        shell: bash
        run: cmake --build build --config Release

      #######################################################################
      # 7️⃣  Bundle OpenSSL DLLs next to the exe (search multiple roots)
      #######################################################################
      - name: Bundle OpenSSL DLLs
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $outDir = "${{ github.workspace }}\build\bin"

          $roots = @('C:\openssl\bin', 'C:\Program Files\OpenSSL-Win64\bin', 'C:\Program Files\OpenSSL-Win32\bin')
          $found = $false
          foreach ($r in $roots) {
            if (Test-Path $r) {
              $crypto = Get-ChildItem -Path $r -Filter 'libcrypto*-1_1*-x64.dll' -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
              $ssl    = Get-ChildItem -Path $r -Filter 'libssl*-1_1*-x64.dll'    -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
              if ($crypto -and $ssl) {
                Write-Host "✅  Found OpenSSL DLLs in $r → copying to $outDir"
                Copy-Item $crypto.FullName -Destination $outDir -Force
                Copy-Item $ssl.FullName    -Destination $outDir -Force
                $found = $true
                break
              }
            }
          }

          if (-not $found) { throw '❌ OpenSSL 1.1 DLLs not found – aborting.' }

      #######################################################################
      # 8️⃣  Upload artifact (exe + DLLs + data folder)
      #######################################################################
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: aseprite-windows-release
          path: |
            build/bin/aseprite.exe
            build/bin/libcrypto*-1_1*-x64.dll
            build/bin/libssl*-1_1*-x64.dll
            build/bin/data/**
