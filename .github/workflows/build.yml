# GitHub Actions Workflow — Windows‑only **Release** build for Aseprite (GUI + Lua)
# Copy this to .github/workflows/build.yml

name: build

on:
  push:
    branches: [main]
  pull_request:

jobs:
  build:
    runs-on: windows-latest

    steps:
      # 1️⃣ Checkout (with submodules)
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      # 2️⃣ Toolchain helpers
      - uses: aseprite/get-ninja@main      # Ninja
      - uses: ilammy/msvc-dev-cmd@v1       # MSVC env

      # 3️⃣ Download the Skia binary that matches the current commit
      - name: Download Skia
        shell: bash
        run: |
          this_dir=$(cygpath "${{ github.workspace }}")
          skia_url=$(source "$this_dir/laf/misc/skia-url.sh" | xargs)
          skia_file=$(basename "$skia_url")
          echo "Skia URL → $skia_url"
          curl -L -o "$skia_file" "$skia_url"
          unzip -q "$skia_file" -d skia

      # 4️⃣ Install OpenSSL 1.1 runtime to a **fixed path** so we can always find the DLLs
      #    The *light* package has no weird extras and still ships 1.1.1‑series DLLs that Aseprite expects
      - name: Install OpenSSL 1.1 runtime
        shell: pwsh
        run: |
          choco install openssl.light --version 1.1.1.2100 --params "/InstallDir:C:\openssl" --no-progress -y

      # 5️⃣ Configure CMake (Release + Skia + Lua scripting)
      - name: Configure CMake
        shell: bash
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DLAF_BACKEND=skia \
            -DSKIA_DIR=$(realpath skia) \
            -DSKIA_LIBRARY_DIR=$(realpath skia/out/Release-x64) \
            -DENABLE_SCRIPTING=ON \
            -DENABLE_CCACHE=OFF

      # 6️⃣ Build
      - name: Build
        shell: bash
        run: cmake --build build --config Release

      # 7️⃣ Bundle the two OpenSSL 1.1 DLLs next to the exe
      - name: Bundle OpenSSL DLLs
        shell: pwsh
        run: |
          $dllRoot = 'C:\openssl\bin'
          $outDir  = "${{ github.workspace }}\build\bin"
          Copy-Item "$dllRoot\libcrypto-1_1-x64.dll" -Destination $outDir -Force
          Copy-Item "$dllRoot\libssl-1_1-x64.dll"    -Destination $outDir -Force

      # 8️⃣ Upload artifact (exe + DLLs + data folder)
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: aseprite-windows-release
          path: |
            build/bin/aseprite.exe
            build/bin/libcrypto-1_1-x64.dll
            build/bin/libssl-1_1-x64.dll
            build/bin/data/**
